#!/bin/bash

set -e -u

confdir=/usr/share/archiso/configs
config=
options=

_usage () {
        echo
        echo 'aui-mkiso, Live ISO image build.'
        echo
        echo 'Command synopsis:'
        echo 'aui-mkiso <desktop environment> [options]'
        echo
        echo 'To get help run:'
        echo 'aui-mkiso --help'
        echo
        exit ${1}
}

_help () {
        echo
        echo 'Archuseriso tool for building a custom Arch Linux Live ISO image.'
        echo
        echo 'Command synopsis:'
        echo 'aui-mkiso <desktop environment> [options]'
        echo
        echo 'Options:'
        echo '-h, --help                        Command help'
        echo '--addpkg <package1,package2,...>  Comma separated list of additional package names to install'
        echo '-C, --confdir <path>              Directory configs (default: /usr/share/archiso/configs)'
        echo '    --configs-dir <path>' 
        echo '-l, --language <language>         Default language. Select one from:'
        echo '                                  cz, de, es, fr, gr, hu, it, nl, pl, pt, ro, rs, ru, tr, ua'
        echo '--nvidia                          Installs Nvidia graphics driver'
        echo '--optimus                         Optimus hardware setup. Intel iGPU used by default,'
        echo '                                  Nvidia dGPU configured for PRIME render offload'
        echo '--pkgdir <path>                   User directory containing package files to install'
        echo '-v, --verbose                     Verbose mode'
        echo
        echo 'ISO config list:'
        echo 'console, cinnamon, deepin, gnome, i3, kde, mate, xfce'
        echo
        echo 'Build Examples'
        echo
        echo 'Xfce desktop environment with default options:'
        echo 'sudo aui-mkiso xfce'
        echo
        echo 'Xfce desktop environment, Spanish language, PRIME render offload setup for Optimus hardware:'
        echo 'sudo aui-mkiso xfce --language es --optimus'
        echo
        echo 'Xfce desktop environment, additional packages from official repositories, plus user package'
        echo 'located in directory ~/mypackages, directory must contain pkg.tar.xz or pkg.tar.zst files:'
        echo 'sudo aui-mkiso xfce --addpkg byobu,base-devel --pkgdir ~/mypackages'
        echo
        exit ${1}
}

OPTS=$(getopt -o 'A:C:D:L:N:P:V:c:g:hl:o:w:v' --long 'addpkg:,confdir:,configs-dir:,help,language:,nvidia,optimus,pkgdir:,verbose' -n 'aui-mkiso' -- "$@")
[[ $? -eq 0 ]] || _usage 1
eval set -- "${OPTS}"
unset OPTS
[[ $# -eq 1 ]] && _usage 0

while true; do
        case "$1" in
                '--addpkg')
                        export AUI_ADDITIONALPKGS+="$(tr ',' ' ' <<< $2) "
                        shift 2 ;;
                '-C'|'--confdir'|'--configs-dir')
                        confdir="$2"
                        shift 2 ;;
                '-A'|'-D'|'-L'|'-N'|'-P'|'-V'|'-c'|'-g'|'-l'|'-o'|'-w')
                        options+="$1 $2 "
                        shift 2 ;;
                '-h'|'--help')
                        options="-h "
                        shift ;;
                '--language')
                        options+="-l $2 "
                        shift 2 ;;
                '--nvidia')
                        export AUI_ADDITIONALPKGS+="nvidia nvidia-settings bbswitch "
                        shift ;;
                '--optimus')
                        export AUI_ADDITIONALPKGS+="nvidia nvidia-settings nvidia-prime "
                        export AUI_OPTIMUS=1
                        shift ;;
                '--pkgdir')
                        export AUI_USERPKGDIR="$2"
                        shift 2 ;;
                '-v'|'verbose')
                        options+="-v "
                        shift ;;
                '--')
                        shift
                        break ;;
        esac
done

if [[ $# -eq 0 && "${options}" =~ '-h' ]]; then
       _help 0
fi
if [[ $# -ne 1 ]]; then
       echo 'Error: invalid arguments!'
       _usage 1
fi

case $1 in
        cinnamon | deepin | gnome | i3 | kde | mate | xfce)
                config=$1 ;;
        console)
                echo 'Console iso build reminder, some options may be ignored!'
                config=$1 ;;
        *)
                _usage 1 ;;
esac

if [[ ! "${options}" =~ '-h' && ${EUID} -ne 0 ]]; then
        echo "This script must be run as root."
        echo
        echo "help:"
        echo "aui-mkiso -h"
        exit 1
fi

if [[ -d "work" ]]; then
        echo \'work\'' directory exists!'
fi

# Launch the build script:
eval "${confdir}/${config}/build.sh ${options}"

# vim: set expandtab:
